{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/projects","result":{"data":{"page":{"__typename":"MdxPage","id":"00dbf9d0-b1eb-529f-9594-b4f3cc448fcc","title":"Projects","slug":"/projects","excerpt":"I love to explore and build new things. I've recently been focused on projects\nto support reproducible web-based mapping. The source forâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Projects\",\n  \"slug\": \"/projects\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Title = makeShortcode(\"Title\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I love to explore and build new things. I've recently been focused on projects\\nto support reproducible web-based mapping. The source for nearly all my projects\\nis available at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/kylebarron\"\n  }), \"Github\"), \".\"), mdx(Title, {\n    text: \"Mapping\",\n    mdxType: \"Title\"\n  }), mdx(\"h5\", null, mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"projects/nst-guide\"\n  }), \"National Scenic Trails Guide\")), mdx(\"p\", null, \"Hello world\"), mdx(\"h5\", null, mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"projects/osm-liberty-topo\"\n  }), \"OSM Liberty Topo\")), mdx(\"p\", null, \"Hello world\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"demquery\")), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"keplergl_quickvis\")), mdx(GithubLink, {\n    languages: [\"py\"],\n    href: \"https://github.com/kylebarron/keplergl_quickvis\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"p\", null, \"Python library and command line interface to quickly, interactively visualize\\ngeospatial data with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kepler.gl/\"\n  }), \"Kepler.gl\"), \". Since I work with GIS data\\nin Python, I use this whenever I need to see my data on a map.\"), mdx(Title, {\n    text: \"Jupyter\",\n    mdxType: \"Title\"\n  }), mdx(\"h5\", null, \"Hydrogen\"), mdx(GithubLink, {\n    languages: [\"js\"],\n    href: \"https://github.com/nteract/hydrogen\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"p\", null, \"The Hydrogen project is a front-end for the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jupyter.org\"\n  }), \"Jupyter\"), \"\\nproject, enabling interactive coding and rich output formats inside the Atom\\ntext editor. I \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/nteract/hydrogen/commits?author=kylebarron\"\n  }), \"contributed\\ncode\"), \" that\\nallowed Jupyter Notebook files to be imported and exported as regular Python\\nfiles.\"), mdx(Title, {\n    text: \"Stata\",\n    mdxType: \"Title\"\n  }), mdx(\"p\", null, \"While working as an economics research assistant, I built a number of\\nopen-source tools that interface with the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stata.com\"\n  }), \"Stata statistical\\npackage\"), \" to improve research reproducibility and increase\\nproductivity.\"), mdx(\"h5\", null, \"Stata Jupyter Kernel\"), mdx(GithubLink, {\n    languages: [\"py\"],\n    href: \"https://github.com/kylebarron/stata_kernel\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"p\", null, \"Connects Stata to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jupyter.org/\"\n  }), \"Jupyter\"), \" ecosystem, enabling researchers to use a modern data science toolkit with Stata.\"), mdx(\"p\", null, \"Jupyter Notebooks permit sharing of code and results together, with simple\\nreproducible modifications in a web-based computational environment. Alternative\\nfront-ends like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/nteract/hydrogen\"\n  }), \"Hydrogen\"), \" allow for rich\\nHTML output even from computations on a remote server.\"), mdx(\"p\", null, \"As of February 2020, it has been downloaded \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pepy.tech/project/stata-kernel\"\n  }), \"nearly 90,000 times\"), \".\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"stata-exec\")), mdx(GithubLink, {\n    languages: [\"js\"],\n    href: \"https://github.com/kylebarron/stata-exec\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"p\", null, \"Send code to the Stata window from the Atom text editor. This is a more\\nprimitive version of running Stata code from Atom than the Jupyter kernel above.\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"language-stata\")), mdx(GithubLink, {\n    languages: [\"py\"],\n    href: \"https://github.com/kylebarron/language-stata\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"p\", null, \"Syntax highlighting for Stata for the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://atom.io\"\n  }), \"Atom text editor\"), \".\"), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"stataParquet\")), mdx(GithubLink, {\n    languages: [\"java\"],\n    href: \"https://github.com/kylebarron/stataParquet\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"p\", null, \"A prototype Java implementation of reading \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://parquet.apache.org/\"\n  }), \"Parquet\\nfiles\"), \" into Stata. My first Java project, I was\\nable to successfully read Parquet files into Stata's memory, but it ended up\\nbeing less performant than my friend Mauricio Caceres' \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mcaceresb/stata-parquet\"\n  }), \"C++\\nimplementation\"), \".\"), mdx(Title, {\n    text: \"Miscellaneous\",\n    mdxType: \"Title\"\n  }), mdx(\"h5\", null, mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"medicare-documentation\")), mdx(GithubLink, {\n    languages: [\"py\"],\n    href: \"https://github.com/kylebarron/medicare-documentation/\",\n    mdxType: \"GithubLink\"\n  }), mdx(\"p\", null, \"While working with Medicare data, I was frustrated with the fragmented state of public documentation regarding the data I was working with.\"), mdx(\"p\", null, \"I\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/kylebarron/medicare-documentation/blob/master/code/02parse.py\"\n  }), \"scraped\"), \"\\nthe \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.resdac.org/\"\n  }), \"ResDAC documentation website\"), \" and joined it with\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://data.nber.org/medicare/\"\n  }), \"public NBER documentation\"), \" to create my own\\nbeautiful, responsive \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kylebarron.dev/medicare-documentation\"\n  }), \"documentation\\nwebsite\"), \" to help me search\\ndocumentation faster. I used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mkdocs.org/\"\n  }), \"MkDocs\"), \" as the static\\nsite generator and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://squidfunk.github.io/mkdocs-material/\"\n  }), \"Material for\\nMkDocs\"), \" as the theming.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/projects"}}}