{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/using-gnu-make-with-stata-projects","result":{"data":{"post":{"__typename":"MdxPost","id":"382a8d20-1545-5987-8187-1603ad92d6d0","slug":"/using-gnu-make-with-stata-projects","title":"Using GNU Make with Stata projects","date":"March 21st, 2018","tags":null,"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Using GNU Make with Stata projects\",\n  \"date\": \"2018-03-21 13:45\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I've thought about this before too. I don't currently have any projects that are large enough to absolutely necessitate using a program like Make (currently I number my files to keep dependencies straight). However, in general I'm of the opinion that I'd rather incorporate a program like Make while my program is small, when it's easiest to add to the Makefile as I go along.\"), mdx(\"p\", null, \"Mauricio created his own Make-like system in Python, but isn't developing it anymore, and I don't want to keep up development of my own version of this when great open-source, well-supported tools exist.\"), mdx(\"p\", null, \"I agree that GNU Make can be confusing, but I think one of the main reasons why it's confusing is that most documentation using it is geared towards C or C++ projects, with very complicated dependency structures. The nice thing about Make is that it's language independent and just uses shell commands. As long as your projects take place on a Linux/Unix or Mac environment, Make will always work.\"), mdx(\"p\", null, \"I just put together a basic example of make with shell commands in a Git repository. Check it out with\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git clone https://github.com/kylebarron/make-test.git\\ncd make-test\\nmake\\nmake dependency1\\n\")), mdx(\"p\", null, \"It should output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"> make\\nbash dep1.sh\\nthis is dependency 1\\nbash dep2.sh\\nthis is dependency 2\\n# make dependency1\\n# make dependency2\\nbash final.sh\\nThis is final.sh\\n> make dependency1\\nbash dep1.sh\\nthis is dependency 1\\n\")), mdx(\"p\", null, \"Look inside the Makefile and you'll see how simple it is. The Makefile is literally just\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\"\n  }), \"all: final\\n\\ndependency1:\\n    bash dep1.sh\\n\\ndependency2:\\n    bash dep2.sh\\n\\ndependency3:\\n    bash dep3.sh\\n\\nfinal: dependency1 dependency2\\n    bash final.sh\\n\")), mdx(\"p\", null, \"Typing just \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make\"), \" runs the first \\\"target\\\", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"all\"), \" step. Since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"all\"), \" says to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"final\"), \", Make searches for that\\ntarget explanation. The items after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"final:\"), \" list its dependencies.\\nSince it lists \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dependency1\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dependency2\"), \", Make runs whatever is specified for each of those, then runs whatever is specified for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"final\"), \".\\nNote that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dependency3\"), \" is not run when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"final\"), \" is run, since it's not listed as a dependency.\"), mdx(\"p\", null, \"You can also ask Make to run a specific target. So \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make dependency1\"), \" runs \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dependency1\"), \" and whatever dependencies it has.\"), mdx(\"p\", null, \"Instead of listing dependencies after the colon, you could also list them as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make dependency\"), \" inside the clause, like\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\"\n  }), \"final:\\n    make dependency1\\n    make dependency2\\n    bash final.sh\\n\")), mdx(\"p\", null, \"I think this is simple enough to be used for Stata jobs, where instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bash dep1.sh\"), \", you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stata-mp -b do filename.do\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Important: you must use tabs for indentation\"), \". I use spaces instead of tabs for most programming, like Stata and Python, but Make will only work with tabs. I use Atom for everything, and it automatically switches to using tabs when I name a file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Makefile\"), \".\"), mdx(\"p\", null, \"Here are a few GNU Make tutorials written with data science in mind; I particularly like the first one:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://zmjones.com/make/\"\n  }), \"GNU Make for Reproducible Data Analysis\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://bost.ocks.org/mike/make/\"\n  }), \"Why Use Make\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://www.jonzelner.net/statistics/make/reproducibility/2016/06/01/makefiles/\"\n  }), \"Makefiles for fun and profit\"))), mdx(\"p\", null, \"A popular modern alternative to Make is luigi, which is developed by Spotify and widely-used, but I think that's actually overkill for Stata jobs.\"), mdx(\"p\", null, \"There are also some language-specific workflow programs like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ropensci/drake\"\n  }), \"drake\"), \" for R, but that's obviously less appealing to me, when you can \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://stat545.com/automation00_index.html\"\n  }), \"use make with R\"), \".\"), mdx(\"p\", null, \"Make will do that automatically; i.e. rerun automatically if the source timestamp is newer than the output timestamp, if the \\\"target\\\" name is the name of the outputted file. So if you're putting a Stata job in the makefile, you could do something like the following\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"helloworld.do\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-stata\"\n  }), \"di \\\"hello world\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-makefile\"\n  }), \"helloworld.log: helloworld.do\\n    stata-mp -b do helloworld.do\\n\")), mdx(\"p\", null, \"Then the first time you run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make\"), \", it will do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stata-mp -b do helloworld.do\"), \". The second time (if you haven't changed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"helloworld.do\"), \") it will print\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"make: `helloworld.log' is up to date.\\n\")), mdx(\"p\", null, \"and won't run it again.\"), mdx(\"p\", null, \"Make does this specifically because the file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"helloworld.do\"), \" is listed as a dependency after the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":\"), \" for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"helloworld.log\"), \" target.\"), mdx(\"p\", null, \"Kyle\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"I've thought about this before too. I don't currently have any projects that are large enough to absolutely necessitate using a program like…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/using-gnu-make-with-stata-projects","formatString":"MMMM Do, YYYY"}}}