{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/blog/serverless-aerial-imagery","result":{"data":{"post":{"__typename":"MdxPost","slug":"/blog/serverless-aerial-imagery","title":"Serverless 3D Terrain","date":"April 15th, 2020","tags":null,"description":"Serving aerial imagery map tiles on the fly with AWS Lambda and Cloud-Optimized GeoTIFF","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Serverless 3D Terrain\",\n  \"date\": \"2020-04-15T00:00:00.000Z\",\n  \"slug\": \"/blog/serverless-aerial-imagery\",\n  \"description\": \"Serving aerial imagery map tiles on the fly with AWS Lambda and Cloud-Optimized GeoTIFF\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"TODO: pricing section. Graph of costs per request usage. Mapbox free until 750,000 requests. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mapbox.com/pricing/#tile\"\n  }), \"https://www.mapbox.com/pricing/#tile\")), mdx(\"p\", null, \"Serving aerial imagery map tiles on the fly with AWS Lambda and Cloud-Optimized\\nGeoTIFF.\"), mdx(\"h2\", {\n    \"id\": \"overview\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#overview\",\n    \"aria-label\": \"overview permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Overview\"), mdx(\"h3\", {\n    \"id\": \"motivation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#motivation\",\n    \"aria-label\": \"motivation permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Motivation\"), mdx(\"p\", null, \"Aerial imagery is huge, and generating and storing map tiles is non-trivial.\"), mdx(\"p\", null, \"For a rough bounding box of the U.S. we can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mapbox/mercantile\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"mercantile\")), \" to\\ncount the number of tiles at a mid-zoom.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"> echo \\\"[-126.71,24.49,-66.59,49.48]\\\" | mercantile tiles 10 | wc -l\\n15824\\n\")), mdx(\"p\", null, \"That's 15,000 tiles at \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"zoom 10\"), \". At each additional zoom each tile is split\\ninto 4. So at zoom 16, which displays the NAIP tiles in full resolution (at\\nretina @2x resolution), the number of tiles is\"), mdx(TeX, {\n    math: \"15,000 \\\\times 4^{16 - 10} \\\\approx 65,000,000\",\n    mdxType: \"TeX\"\n  }), mdx(\"p\", null, \"That's \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"a lot\"), \" of tiles. From \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/nst-guide/naip\"\n  }), \"previous exploration\"), \" of tiling\\nNAIP imagery, I found that each retina tile is around 500KB uncompressed or\\n100KB when compressed with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pngquant\"), \". Thus even compressed NAIP tiles for the\\ncontiguous U.S. would take up 6.5 TB of space, and that's just for zoom 16. Zoom\\n15 would take another ~1.5 TB of space, and so on.\"), mdx(\"h3\", {\n    \"id\": \"aws-open-data\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#aws-open-data\",\n    \"aria-label\": \"aws open data permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"AWS Open Data\"), mdx(\"p\", null, \"NAIP data and Landsat images are hosted on AWS open datasets. The former is in\\nrequester pays buckets; the latter is free for anyone to download. Crucially,\\nboth are stored in Cloud-Optimized GeoTIFF (COG) format. This format uses HTTP\\nrange requests to download a small portion of a larger COG file. This means it's\\nfeasible to quickly work with portions of large images.\"), mdx(\"h3\", {\n    \"id\": \"outline\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#outline\",\n    \"aria-label\": \"outline permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Outline\"), mdx(\"h2\", {\n    \"id\": \"high-zoom-serverless-naip\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#high-zoom-serverless-naip\",\n    \"aria-label\": \"high zoom serverless naip permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"High zoom: Serverless NAIP\"), mdx(\"p\", null, \"Install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cogeo-mosaic\"), \", which takes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".tif\"), \" files as input and creates a\\nMosaicJSON. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cogeo-mosaic\"), \" depends on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pygeos\"), \", which I've been unable to\\ninstall through pip, so I first install that through Conda.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"conda install pygeos -c conda-forge -y\\npip install cogeo-mosaic\\n\")), mdx(\"p\", null, \"First download the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"manifest.txt\"), \". This file contains a listing of all files\\nstored in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"naip-visualization\"), \" S3 bucket.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"> aws s3 cp s3://naip-visualization/manifest.txt ./ --request-payer\\n> head -n 5 manifest.txt\\nal/2011/100cm/fgdc/30085/m_3008501_ne_16_1_20110815.txt\\nal/2011/100cm/fgdc/30085/m_3008501_nw_16_1_20110815.txt\\nal/2011/100cm/fgdc/30085/m_3008502_ne_16_1_20110815.txt\\nal/2011/100cm/fgdc/30085/m_3008502_nw_16_1_20110815.txt\\nal/2011/100cm/fgdc/30085/m_3008503_ne_16_1_20110815.txt\\n\")), mdx(\"p\", null, \"Aerial imagery is recorded by state, and most states have \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.arcgis.com/home/webmap/viewer.html?webmap=17944d45bbef42afb05a5652d7c28aa5\"\n  }), \"multiple years of\\navailability\"), \". For example, imagery was taken of Alabama in 2011, 2013, 2015, and\\n2017. If I create a MosaicJSON using all years; the on-the-fly computations\\nwould be more difficult because more source imagery would have to be compared to\\ngenerate a tile. I only care about most-recent imagery, so I'll extract the tif\\nimage URLs of the latest year for each state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Generate file with state abbrevations\\ncat manifest.txt \\\\\\n    `# Extract text before first /, i.e. the state abbr` \\\\\\n    | awk -F '/' '{print $1}' \\\\\\n    `# Deduplicate` \\\\\\n    | uniq \\\\\\n    `# Remove an extraneous line` \\\\\\n    | sed '/manifest.test/d' \\\\\\n    `# Save to states.txt` \\\\\\n    > states.txt\\n\\n# For each state abbrevation, get the most recent year of images\\n# For example, `al/2017`\\ncat states.txt | while read state\\ndo\\n    cat manifest.txt \\\\\\n        `# Keep only images of this state` \\\\\\n        | grep \\\"^${state}/\\\" \\\\\\n        `# Extract year` \\\\\\n        | awk -F '/' '{print $2}' \\\\\\n        `# Deduplicate` \\\\\\n        | uniq \\\\\\n        `# Sort by year, descending` \\\\\\n        | sort -nr \\\\\\n        `# Keep most recent year` \\\\\\n        | head -n 1 \\\\\\n        `# Prepend with state, so that it's {state}/{year}` \\\\\\n        | sed -e \\\"s|^|${state}/|\\\" \\\\\\n        `# Save to states_latest.txt` \\\\\\n        >> states_latest.txt\\ndone\\n\\n# For each latest state-year combination, keep URLs of applicable tif images\\ncat states_latest.txt | while read state_latest\\ndo\\n    cat manifest.txt \\\\\\n        | grep \\\"^${state_latest}/\\\" \\\\\\n        | grep \\\".tif\\\" \\\\\\n        | sed -e 's|^|s3://naip-visualization/|' \\\\\\n        >> tif_latest.txt\\ndone\\n\")), mdx(\"p\", null, \"See how many tif images per state\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cat states.txt | while read state\\ndo\\n    # printf \\\"State: $state \\\"\\n    cat tif_latest.txt \\\\\\n        | grep \\\"^s3://naip-visualization/${state}/\\\" \\\\\\n        | wc -l\\ndone\\n\")), mdx(\"p\", null, \"Example with Rhode Island\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cat tif_latest.txt \\\\\\n    | grep \\\"^s3://naip-visualization/ri/\\\" \\\\\\n    | cogeo-mosaic footprint - > footprint.geojson\\n\")), mdx(\"p\", null, \"Total number of files\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"> wc -l tif_latest.txt\\n219068 tif_latest.txt\\n\")), mdx(\"p\", null, \"NAIP imagery tiffs are in a requester pays bucket. In order to access them, you\\nneed to set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AWS_REQUEST_PAYER\"), \" environment variable:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"export AWS_REQUEST_PAYER=\\\"requester\\\"\\n\")), mdx(\"p\", null, \"I also found that on an AWS EC2 instance; \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cogeo-mosaic create\"), \" was failing\\nwhile it was working on my local computer. In general, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cogeo-mosaic create\"), \"\\nisn't working for some URL; you should run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rio info <URL>\"), \" and see what the\\nerror is, since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cogeo-mosaic\"), \" uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rasterio\"), \" internally, but doesn't currently\\nprint \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rasterio\"), \" errors to stdout. In my case, I had to set the certificates\\npath (see\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/cogeotiff/rio-tiler/issues/19\"\n  }), \"cogeotiff/rio-tiler#19\"), \",\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mapbox/rasterio/issues/942\"\n  }), \"mapbox/rasterio#942\"), \").\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"export CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt\\n\")), mdx(\"p\", null, \"Then create the MosaicJSON file. GET requests are priced at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$0.0004\"), \" per 1000\\nrequests, so creating the MosaicJSON should cost \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.0004 * (219068 / 1000) =\\n0.087\"), \". 9 cents!\"), mdx(\"p\", null, \"This took about 1.5GB of memory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cat tif_latest.txt \\\\\\n    | cogeo-mosaic create - \\\\\\n    > naip_mosaic.json\\n\")), mdx(\"h3\", {\n    \"id\": \"deploy\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#deploy\",\n    \"aria-label\": \"deploy permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Deploy\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git clone https://github.com/developmentseed/cogeo-mosaic-tiler.git\\n\\n# Create lambda package\\ncd cogeo-mosaic-tiler & make package\\n\\n# Deploy\\nnpm install serverless -g\\nsls deploy --bucket kylebarron-landsat-test --region us-west-2\\n\")), mdx(\"p\", null, \"Add the mosaic json\"), mdx(\"p\", null, \"Create Mosaic id (\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/developmentseed/cogeo-mosaic-tiler/blob/master/doc/API.md#mosaicjson-path\"\n  }), \"https://github.com/developmentseed/cogeo-mosaic-tiler/blob/master/doc/API.md#mosaicjson-path\"), \")\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"bucket_name=\\\"...\\\"\\ngzip -c naip_mosaic.json > naip_mosaic.json.gz\\nhash=$(sha224sum naip_mosaic.json.gz | awk '{print $1}')\\naws s3 cp naip_mosaic.json.gz \\\"s3://${bucket_name}/mosaics/${hash}.json.gz\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"medium-zoom-serverless-landsat\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#medium-zoom-serverless-landsat\",\n    \"aria-label\": \"medium zoom serverless landsat permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Medium zoom: Serverless Landsat\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git clone https://github.com/developmentseed/awspds-mosaic\\ncd awspds-mosaic\\nmake package\\ncd services/landsat\\nsls deploy \\\\\\n  --region us-west-2 \\\\\\n  --bucket a-bucket-where-you-store-data \\\\\\n  --token {OPTIONAL MAPBOX TOKEN}\\n\")), mdx(\"h2\", {\n    \"id\": \"low-zoom-pregenerated-landsat-tiles\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#low-zoom-pregenerated-landsat-tiles\",\n    \"aria-label\": \"low zoom pregenerated landsat tiles permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Low zoom: Pregenerated Landsat tiles\"), mdx(\"h2\", {\n    \"id\": \"caching-through-cloudflare\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#caching-through-cloudflare\",\n    \"aria-label\": \"caching through cloudflare permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Caching through Cloudflare\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/a/45849093\"\n  }), \"This StackOverflow answer\"), \" is a good overview of how\\nto connect Cloudflare as a proxy for API Gateway, so I won't go over the entire\\nprocess. Just a couple edits I made:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Since I'm using the cheaper HTTP API Gateway endpoint instead of the standard REST API Gateway endpoint, the certificate needs to be uploaded to ACM in the same region as the lambda functions, which are in US-West-2 for NAIP.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I use the same base domain for traffic served directly from S3. Since S3 doesn't support HTTPS traffic, I need to have Cloudflare's SSL setting set to Flexible, which means that traffic is encrypted between the user and Cloudflare, but not between Cloudflare and S3. However I need to serve traffic to AWS API Gateway with HTTPS, so I set a page rule so that all traffic to AWS API Gateway has the Strict SSL setting. If you try to access your site and see a Cloudflare screen saying that the host server isn't responding, this may be your issue.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don't forget to set a \\\"Base Path Mapping\\\" on the AWS API Gateway screen so that the traffic passed through the custom URL is correctly passed on to the right lambda function.\")), mdx(\"h2\", {\n    \"id\": \"previous-work\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#previous-work\",\n    \"aria-label\": \"previous work permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Previous work\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/awslabs/landsat-on-aws\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"landsat-on-aws\")), \" and the old \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amazon-archives/naip-on-aws\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"naip-on-aws\")), \" appear to have only served a single image at a time. The former is still running, and you can see the website at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://landsatonaws.com/\"\n  }), \"https://landsatonaws.com/\"), \".\"), mdx(\"h2\", {\n    \"id\": \"references-and-more-info\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#references-and-more-info\",\n    \"aria-label\": \"references and more info permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"References and more info\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/devseed/cog-talk-part-2-mosaics-bbbf474e66df\"\n  }), \"Helpful blog post\"), \" on mosaicing COGs, and introducing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rio-tiler-mosaic\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/mapbox/rio-glui\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"rio glui\")), \": inspect a COG in the browser on the fly. I see this as a raster equivalent of the great \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/mapbox/mbview\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"mbview\")), \", which lets you inspect vector tiles easily. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"rio glui\"), \" can only inspect one COG at a time, but still helpful.\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"TODO: pricing section. Graph of costs per request usage. Mapbox free until 750,000 requests.  https://www.mapbox.com/pricing/#tile Serving…","timeToRead":3,"banner":null}},"pageContext":{"slug":"/blog/serverless-aerial-imagery","formatString":"MMMM Do, YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}