{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/blog/new-website","result":{"data":{"post":{"__typename":"MdxPost","id":"4bc6068c-eb07-5bb5-a49e-10dfea185eed","slug":"/blog/new-website","title":"Self-hosted Static Vector Maps","date":"February 17th, 2020","tags":null,"description":"Moving to GatsbyJS.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Self-hosted Static Vector Maps\",\n  \"date\": \"2020-02-17T00:00:00.000Z\",\n  \"slug\": \"/blog/new-website\",\n  \"description\": \"Moving to GatsbyJS.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I put each map onto its own block disk, so that I can expand use as needed.\"), mdx(\"p\", null, \"Go to Google Cloud Compute console, choose your VM instance, click \\\"Edit\\\", then under \\\"Additional Disks\\\", click \\\"Add new disk\\\".\"), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://openmaptiles.com/downloads/dataset/osm/\"\n  }), \"planet Mbtiles file\"), \" for use by an open-data project is 51GB, so I'll make a new disk of ~55GB.\"), mdx(\"p\", null, \"Give the disk a nice descriptive name like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"openmaptiles-planet-2017-07-03\"), \". I made the disk for 55GB. Click \\\"Done\\\", and the disk will be provisioned.\"), mdx(\"p\", null, \"Now the disk is connected to the VM, but you still need to format and mount it. SSH into your server.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"> sudo lsblk\\nNAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\\nloop0     7:0    0 91.2M  1 loop /snap/google-cloud-sdk/118\\nloop2     7:2    0 91.4M  1 loop /snap/core/8689\\nloop3     7:3    0 91.3M  1 loop /snap/core/8592\\nloop4     7:4    0 90.7M  1 loop /snap/google-cloud-sdk/117\\nsda       8:0    0   15G  0 disk\\n\\u251C\\u2500sda1    8:1    0 14.9G  0 part /\\n\\u251C\\u2500sda14   8:14   0    4M  0 part\\n\\u2514\\u2500sda15   8:15   0  106M  0 part /boot/efi\\nsdb       8:16   0  100G  0 disk /mnt/disks/mbtiles-disk\\nsdc       8:32   0   55G  0 disk\\n\")), mdx(\"p\", null, \"I can see that the new disk is at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/dev/sdc\"), \" (it's 55GB and currently\\nunmounted).\"), mdx(\"p\", null, \"Then format the disk. Note that this deletes all data on the disk, so make sure\\nyou have the right identifier! (I'm leaving \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DEVICE_ID\"), \" here so that I don't\\naccidentally copy-paste this in the future and forget to change the device id!)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo mkfs.ext4 -m 0 -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/[DEVICE_ID]\\n\")), mdx(\"p\", null, \"Then create a new directory for the mount point:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo mkdir -p /mnt/disks/openmaptiles-planet\\n\")), mdx(\"p\", null, \"Then mount the disk to that directory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo mount -o discard,defaults /dev/sdc /mnt/disks/openmaptiles-planet\\n\")), mdx(\"p\", null, \"Then grant read/write permissions to all users:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo chmod a+w /mnt/disks/openmaptiles-planet\\n\")), mdx(\"p\", null, \"Now this disk is formatted and mounted, but every time you restart you'll have\\nto redo this process. In order to have the disk be auto-mounted on every\\nrestart, you need to add an entry for the disk into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/fstab\"), \".\"), mdx(\"p\", null, \"Find the UUID for the disk:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo blkid /dev/sdc\\n\")), mdx(\"p\", null, \"Then add an entry of the following to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/fstab/\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"UUID=[UUID_VALUE] /mnt/disks/[MNT_DIR] ext4 discard,defaults,nofail 0 2\\n\")), mdx(\"p\", null, \"So in my case I'd add:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"UUID=406c2dad-373e-41a8-97ab-4e11fc86fd46 /mnt/disks/openmaptiles-planet ext4 discard,defaults,nofail 0 2\\n\")), mdx(\"p\", null, \"Now download the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"planet.mbtiles\"), \" to the disk! It's a big file, so it could take\\n~1 hour.\"), mdx(\"h2\", {\n    \"id\": \"references\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#references\",\n    \"aria-label\": \"references permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://cloud.google.com/compute/docs/disks/add-persistent-disk\"\n  }), \"Google cloud guide for adding a disk\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"I put each map onto its own block disk, so that I can expand use as needed. Go to Google Cloud Compute console, choose your VM instanceâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/blog/new-website","formatString":"MMMM Do, YYYY"}}}