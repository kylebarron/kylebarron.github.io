{"version":3,"sources":["webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/tag.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/tag-query.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/tag.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/blog-list-item.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/listing.tsx"],"names":["Tag","posts","pageContext","useMinimalBlogConfig","tagsPath","basePath","title","name","sx","alignItems","justifyContent","flexFlow","variant","as","Link","to","replaceSlashes","mt","TagComponent","data","allPost","nodes","query","ItemTags","tags","Fragment","map","tag","i","key","slug","BlogListItem","post","showTags","mb","fontSize","color","a","date","Listing","className"],"mappings":"oQAgDeA,EAjBH,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,YAA4B,EACjBC,cAAvBC,EADwC,EACxCA,SAAUC,EAD8B,EAC9BA,SAElB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAKC,MAAK,QAAUJ,EAAYK,OAChC,YAAC,IAAD,CAAMC,GAAI,CAAEC,WAAY,SAAUC,eAAgB,gBAAiBC,SAAU,SAC3E,YAAC,IAAD,CAASC,QAAQ,aAAaV,EAAYK,MAC1C,YAAC,IAAD,CAAOM,GAAIC,OAAMN,GAAI,CAAEI,QAAS,mBAAqBG,GAAIC,YAAe,IAAIX,EAAL,IAAiBD,IAAxF,kBAIF,YAAC,IAAD,CAASH,MAAOA,EAAOO,GAAI,CAAES,GAAI,CAAC,EAAG,QCxC5BC,UCQA,YAA0D,IAA5BC,EAA4B,EAA5BA,KAAMjB,EAAsB,EAAtBA,YACzCkB,EAAYD,EAAZC,QAER,OAAO,kBAAC,EAAD,CAAKnB,MAAOmB,EAAQC,MAAOnB,YAAaA,KDXlCgB,IAEFI,EAAQ,Y,kCELrB,yEA8BeC,IAjBE,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,KAAsB,EACTrB,cAAvBC,EADgC,EAChCA,SAAUC,EADsB,EACtBA,SAElB,OACE,kBAAC,IAAMoB,SAAP,KACGD,EAAKE,KAAI,SAACC,EAAKC,GAAN,OACR,kBAAC,IAAMH,SAAP,CAAgBI,IAAKF,EAAIG,QACpBF,GAAF,KACD,kBAAC,IAAD,CAAOf,GAAIC,OAAMC,GAAIC,YAAe,IAAIX,EAAL,IAAiBD,EAAjB,IAA6BuB,EAAIG,OACjEH,EAAIpB,a,6GCkBFwB,EAjBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASC,gBAAT,gBACnB,YAAC,IAAD,CAAKC,GAAI,GACP,YAAC,IAAD,CAAOrB,GAAIC,OAAMC,GAAIiB,EAAKF,KAAMtB,GAAI,CAAE2B,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAO,SAC/DJ,EAAK1B,OAER,iBAAGE,GAAI,CAAE4B,MAAO,YAAanB,GAAI,EAAGoB,EAAG,CAAED,MAAO,aAAeD,SAAU,CAAC,EAAG,EAAG,KAC9E,wBAAOH,EAAKM,MACXN,EAAKR,MAAQS,GACZ,YAAC,IAAMR,SAAP,WAEE,YAAC,IAAD,CAAUD,KAAMQ,EAAKR,WCJhBe,IARC,SAAC,GAAD,IAAGtC,EAAH,EAAGA,MAAH,IAAUuC,iBAAV,eAA0BP,gBAA1B,gBACd,uBAASzB,GAAI,CAAE0B,GAAI,CAAC,EAAG,EAAG,IAAMM,UAAWA,GACxCvC,EAAMyB,KAAI,SAACM,GAAD,OACT,YAAC,EAAD,CAAcH,IAAKG,EAAKF,KAAME,KAAMA,EAAMC,SAAUA","file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-tag-query-tsx-4c4ea4628702fda27c85.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, Heading, Link as TLink } from \"theme-ui\"\nimport { Flex } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport Layout from \"./layout\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport Listing from \"./listing\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport SEO from \"./seo\"\n\ntype TagProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean\n    slug: string\n    name: string\n    [key: string]: any\n  }\n}\n\nconst Tag = ({ posts, pageContext }: TagProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <Layout>\n      <SEO title={`Tag: ${pageContext.name}`} />\n      <Flex sx={{ alignItems: `center`, justifyContent: `space-between`, flexFlow: `wrap` }}>\n        <Heading variant=\"styles.h2\">{pageContext.name}</Heading>\n        <TLink as={Link} sx={{ variant: `links.secondary` }} to={replaceSlashes(`/${basePath}/${tagsPath}`)}>\n          View all tags\n        </TLink>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  )\n}\n\nexport default Tag\n","import { graphql } from \"gatsby\"\nimport TagComponent from \"../components/tag\"\n\nexport default TagComponent\n\nexport const query = graphql`\n  query($slug: String!, $formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, filter: { tags: { elemMatch: { slug: { eq: $slug } } } }) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Tag from \"../../../components/tag\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: any\n  }\n  pageContext: any\n}\n\nexport default function MinimalBlogCoreTag({ data, pageContext }: Props) {\n  const { allPost } = data\n\n  return <Tag posts={allPost.nodes} pageContext={pageContext} />\n}\n","import React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Link as TLink } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <TLink as={Link} to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </TLink>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n"],"sourceRoot":""}